name: Build all Platforms

on:
  push:
  pull_request:
    branches: [ main ]

jobs:
  #####################################
  # Linux with GCC
  build-lin:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install required libs
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libglu1-mesa-dev freeglut3-dev mesa-common-dev
    - name: Prepare
      run: |
        mkdir build-lin
    - name: CMake
      run: |
        cd build-lin
        pwd
        cmake -G Ninja ..
    - name: Build
      run: |
        cd build-lin
        pwd
        ninja
    - name: Upload plugin
      uses: actions/upload-artifact@v2
      with:
        name: HelloWorld
        path: build-lin/lin_*/
        if-no-files-found: error

  #####################################
  # MacOS with CMake/clang and sign/notarize in self-written script
  build-mac:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install required libs
      run: |
        brew install ninja
    - name: Prepare
      run: |
        mkdir build-mac
    - name: CMake
      run: |
        cd build-mac
        pwd
        cmake -G Ninja ..
    - name: Build
      run: |
        cd build-mac
        pwd
        ninja
    - name: Codesign and Notarization
      env: 
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      if: env.MACOS_CERTIFICATE != null     # Only codesign if certificate defined
      run: |
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        chmod a+x docker/sign-notarize
        ./docker/sign-notarize "build-mac/mac_x64/HelloWorld.xpl" "TwinFan.plugin.HelloWorld" certificate.p12 "${{ secrets.MACOS_CERT_PWD }}" "${{ secrets.NOTARIZATION_USERNAME }}" "${{ secrets.NOTARIZATION_PASSWORD }}"
    - name: Upload plugin
      uses: actions/upload-artifact@v2
      with:
        name: HelloWorld
        path: build-mac/mac_*/
        if-no-files-found: error

  #####################################
  # MacOS with XCode and sign notarize in GitHub actions
  build-mac-xcode:
    runs-on: macos-latest
    if: ${{ false }}  # disable for now as not everybody has an XCode project as basis
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: |
        xcodebuild -alltargets -quiet
    - name: Organise plugin for upload
      run: |
        mkdir build/mac_x64
        mv build/Release/HelloWorld.xpl build/mac_x64
    - name: Codesign and Notarization
      env: 
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      if: env.MACOS_CERTIFICATE != null     # Only codesign if certificate defined
      run: |
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        chmod a+x docker/sign-notarize
        ./docker/sign-notarize "build/mac_x64/HelloWorld.xpl" "TwinFan.plugin.HelloWorld" certificate.p12 "${{ secrets.MACOS_CERT_PWD }}" "${{ secrets.NOTARIZATION_USERNAME }}" "${{ secrets.NOTARIZATION_PASSWORD }}"
    - name: Upload plugin
      uses: actions/upload-artifact@v2
      with:
        name: HelloWorld
        path: build/mac_x*/
        if-no-files-found: error

  #####################################
  # Windows with MS Visual Studio
  build-win:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: CMD.EXE /C 'docker\build-win.cmd' "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" 'build'
    - name: Upload plugin
      uses: actions/upload-artifact@v2
      with:
        name: HelloWorld
        path: build/win_x*/
        if-no-files-found: error
